// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	postgres "medicare/internal/dao/sqlc"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

// CreateConsultation provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateConsultation(ctx context.Context, arg postgres.CreateConsultationParams) (postgres.Consultation, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateConsultation")
	}

	var r0 postgres.Consultation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.CreateConsultationParams) (postgres.Consultation, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, postgres.CreateConsultationParams) postgres.Consultation); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(postgres.Consultation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, postgres.CreateConsultationParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePatient provides a mock function with given fields: ctx, arg
func (_m *Querier) CreatePatient(ctx context.Context, arg postgres.CreatePatientParams) (uuid.UUID, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreatePatient")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.CreatePatientParams) (uuid.UUID, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, postgres.CreatePatientParams) uuid.UUID); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, postgres.CreatePatientParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateUser(ctx context.Context, arg postgres.CreateUserParams) (postgres.User, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 postgres.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.CreateUserParams) (postgres.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, postgres.CreateUserParams) postgres.User); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(postgres.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, postgres.CreateUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConsultation provides a mock function with given fields: ctx, id
func (_m *Querier) DeleteConsultation(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConsultation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePatient provides a mock function with given fields: ctx, id
func (_m *Querier) DeletePatient(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePatient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConsultation provides a mock function with given fields: ctx, id
func (_m *Querier) GetConsultation(ctx context.Context, id uuid.UUID) (postgres.Consultation, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetConsultation")
	}

	var r0 postgres.Consultation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (postgres.Consultation, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) postgres.Consultation); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(postgres.Consultation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPatientByID provides a mock function with given fields: ctx, id
func (_m *Querier) GetPatientByID(ctx context.Context, id uuid.UUID) (postgres.Patient, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPatientByID")
	}

	var r0 postgres.Patient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (postgres.Patient, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) postgres.Patient); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(postgres.Patient)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *Querier) GetUserByEmail(ctx context.Context, email string) (postgres.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 postgres.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (postgres.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) postgres.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(postgres.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *Querier) GetUserByID(ctx context.Context, id uuid.UUID) (postgres.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 postgres.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (postgres.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) postgres.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(postgres.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConsultationsByPatient provides a mock function with given fields: ctx, patientID
func (_m *Querier) ListConsultationsByPatient(ctx context.Context, patientID uuid.UUID) ([]postgres.Consultation, error) {
	ret := _m.Called(ctx, patientID)

	if len(ret) == 0 {
		panic("no return value specified for ListConsultationsByPatient")
	}

	var r0 []postgres.Consultation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]postgres.Consultation, error)); ok {
		return rf(ctx, patientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []postgres.Consultation); ok {
		r0 = rf(ctx, patientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postgres.Consultation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, patientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDoctors provides a mock function with given fields: ctx
func (_m *Querier) ListDoctors(ctx context.Context) ([]postgres.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListDoctors")
	}

	var r0 []postgres.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]postgres.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []postgres.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postgres.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPatients provides a mock function with given fields: ctx, arg
func (_m *Querier) ListPatients(ctx context.Context, arg postgres.ListPatientsParams) ([]postgres.Patient, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListPatients")
	}

	var r0 []postgres.Patient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.ListPatientsParams) ([]postgres.Patient, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, postgres.ListPatientsParams) []postgres.Patient); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postgres.Patient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, postgres.ListPatientsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConsultation provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateConsultation(ctx context.Context, arg postgres.UpdateConsultationParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConsultation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.UpdateConsultationParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePatient provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdatePatient(ctx context.Context, arg postgres.UpdatePatientParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePatient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.UpdatePatientParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewQuerier creates a new instance of Querier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Querier {
	mock := &Querier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
