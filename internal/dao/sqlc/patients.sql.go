// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: patients.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPatient = `-- name: CreatePatient :one
INSERT INTO patients (
    id, first_name, last_name, date_of_birth, gender, contact_number, address, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, NOW(), NOW()
) RETURNING id
`

type CreatePatientParams struct {
	ID            uuid.UUID   `json:"id"`
	FirstName     string      `json:"first_name"`
	LastName      string      `json:"last_name"`
	DateOfBirth   pgtype.Date `json:"date_of_birth"`
	Gender        string      `json:"gender"`
	ContactNumber string      `json:"contact_number"`
	Address       string      `json:"address"`
}

func (q *Queries) CreatePatient(ctx context.Context, arg CreatePatientParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createPatient,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.DateOfBirth,
		arg.Gender,
		arg.ContactNumber,
		arg.Address,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deletePatient = `-- name: DeletePatient :exec
DELETE FROM patients WHERE id = $1
`

func (q *Queries) DeletePatient(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePatient, id)
	return err
}

const getPatientByID = `-- name: GetPatientByID :one
SELECT id, first_name, last_name, date_of_birth, gender, contact_number, address, created_at, updated_at FROM patients WHERE id = $1
`

func (q *Queries) GetPatientByID(ctx context.Context, id uuid.UUID) (Patient, error) {
	row := q.db.QueryRow(ctx, getPatientByID, id)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.DateOfBirth,
		&i.Gender,
		&i.ContactNumber,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPatients = `-- name: ListPatients :many
SELECT id, first_name, last_name, date_of_birth, gender, contact_number, address, created_at, updated_at FROM patients ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type ListPatientsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPatients(ctx context.Context, arg ListPatientsParams) ([]Patient, error) {
	rows, err := q.db.Query(ctx, listPatients, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Patient{}
	for rows.Next() {
		var i Patient
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.DateOfBirth,
			&i.Gender,
			&i.ContactNumber,
			&i.Address,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePatient = `-- name: UpdatePatient :exec
UPDATE patients
SET first_name = $2,
    last_name = $3,
    date_of_birth = $4,
    gender = $5,
    contact_number = $6,
    address = $7,
    updated_at = NOW()
WHERE id = $1
`

type UpdatePatientParams struct {
	ID            uuid.UUID   `json:"id"`
	FirstName     string      `json:"first_name"`
	LastName      string      `json:"last_name"`
	DateOfBirth   pgtype.Date `json:"date_of_birth"`
	Gender        string      `json:"gender"`
	ContactNumber string      `json:"contact_number"`
	Address       string      `json:"address"`
}

func (q *Queries) UpdatePatient(ctx context.Context, arg UpdatePatientParams) error {
	_, err := q.db.Exec(ctx, updatePatient,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.DateOfBirth,
		arg.Gender,
		arg.ContactNumber,
		arg.Address,
	)
	return err
}
