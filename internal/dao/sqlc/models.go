// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package postgres

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type UserRole string

const (
	UserRoleReceptionist UserRole = "receptionist"
	UserRoleDoctor       UserRole = "doctor"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

func (e UserRole) Valid() bool {
	switch e {
	case UserRoleReceptionist,
		UserRoleDoctor:
		return true
	}
	return false
}

type Consultation struct {
	ID               uuid.UUID        `json:"id"`
	PatientID        uuid.UUID        `json:"patient_id"`
	DoctorID         uuid.UUID        `json:"doctor_id"`
	ConsultationDate pgtype.Timestamp `json:"consultation_date"`
	Vitals           []byte           `json:"vitals"`
	Diagnosis        pgtype.Text      `json:"diagnosis"`
	Prescription     pgtype.Text      `json:"prescription"`
	Notes            pgtype.Text      `json:"notes"`
}

type Patient struct {
	ID            uuid.UUID        `json:"id"`
	FirstName     string           `json:"first_name"`
	LastName      string           `json:"last_name"`
	DateOfBirth   pgtype.Date      `json:"date_of_birth"`
	Gender        string           `json:"gender"`
	ContactNumber string           `json:"contact_number"`
	Address       string           `json:"address"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
}

type User struct {
	ID           uuid.UUID        `json:"id"`
	FirstName    string           `json:"first_name"`
	LastName     string           `json:"last_name"`
	PasswordHash string           `json:"password_hash"`
	Email        string           `json:"email"`
	Role         UserRole         `json:"role"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
}
