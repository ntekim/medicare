// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: consultations.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createConsultation = `-- name: CreateConsultation :one
INSERT INTO consultations (
    id, patient_id, doctor_id, vitals, diagnosis, prescription, notes
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, patient_id, doctor_id, consultation_date, vitals, diagnosis, prescription, notes
`

type CreateConsultationParams struct {
	ID           uuid.UUID   `json:"id"`
	PatientID    uuid.UUID   `json:"patient_id"`
	DoctorID     uuid.UUID   `json:"doctor_id"`
	Vitals       []byte      `json:"vitals"`
	Diagnosis    pgtype.Text `json:"diagnosis"`
	Prescription pgtype.Text `json:"prescription"`
	Notes        pgtype.Text `json:"notes"`
}

func (q *Queries) CreateConsultation(ctx context.Context, arg CreateConsultationParams) (Consultation, error) {
	row := q.db.QueryRow(ctx, createConsultation,
		arg.ID,
		arg.PatientID,
		arg.DoctorID,
		arg.Vitals,
		arg.Diagnosis,
		arg.Prescription,
		arg.Notes,
	)
	var i Consultation
	err := row.Scan(
		&i.ID,
		&i.PatientID,
		&i.DoctorID,
		&i.ConsultationDate,
		&i.Vitals,
		&i.Diagnosis,
		&i.Prescription,
		&i.Notes,
	)
	return i, err
}

const deleteConsultation = `-- name: DeleteConsultation :exec
DELETE FROM consultations WHERE id = $1
`

func (q *Queries) DeleteConsultation(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteConsultation, id)
	return err
}

const getConsultation = `-- name: GetConsultation :one
SELECT id, patient_id, doctor_id, consultation_date, vitals, diagnosis, prescription, notes FROM consultations
WHERE id = $1
`

func (q *Queries) GetConsultation(ctx context.Context, id uuid.UUID) (Consultation, error) {
	row := q.db.QueryRow(ctx, getConsultation, id)
	var i Consultation
	err := row.Scan(
		&i.ID,
		&i.PatientID,
		&i.DoctorID,
		&i.ConsultationDate,
		&i.Vitals,
		&i.Diagnosis,
		&i.Prescription,
		&i.Notes,
	)
	return i, err
}

const listConsultationsByPatient = `-- name: ListConsultationsByPatient :many
SELECT id, patient_id, doctor_id, consultation_date, vitals, diagnosis, prescription, notes FROM consultations
WHERE patient_id = $1
ORDER BY consultation_date DESC
`

func (q *Queries) ListConsultationsByPatient(ctx context.Context, patientID uuid.UUID) ([]Consultation, error) {
	rows, err := q.db.Query(ctx, listConsultationsByPatient, patientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Consultation{}
	for rows.Next() {
		var i Consultation
		if err := rows.Scan(
			&i.ID,
			&i.PatientID,
			&i.DoctorID,
			&i.ConsultationDate,
			&i.Vitals,
			&i.Diagnosis,
			&i.Prescription,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateConsultation = `-- name: UpdateConsultation :exec
UPDATE consultations
SET vitals = $2,
    diagnosis = $3,
    prescription = $4,
    notes = $5
WHERE id = $1
`

type UpdateConsultationParams struct {
	ID           uuid.UUID   `json:"id"`
	Vitals       []byte      `json:"vitals"`
	Diagnosis    pgtype.Text `json:"diagnosis"`
	Prescription pgtype.Text `json:"prescription"`
	Notes        pgtype.Text `json:"notes"`
}

func (q *Queries) UpdateConsultation(ctx context.Context, arg UpdateConsultationParams) error {
	_, err := q.db.Exec(ctx, updateConsultation,
		arg.ID,
		arg.Vitals,
		arg.Diagnosis,
		arg.Prescription,
		arg.Notes,
	)
	return err
}
